#!/usr/bin/env bash

# `set -x` if DEBUG_PUBLISH_TO_PACKAGES environment variable is set 
# to anything at all. e.g. DEBUG_PUBLISH_TO_PACKAGES=1
# Do this before `set -u` to avoid unbound variable error.
if [[ -n "${DEBUG_PUBLISH_TO_PACKAGES}" ]]; then
  set -x # Print all executed commands to the terminal for debugging
fi

set -e            # Immediately exit if any command has a non-zero exit status
set -u            # Immediately exit if a reference is made to an unbound variable
set -o pipefail   # Pipeline ("|") uses exit status of the first failed command

SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$SCRIPT_DIR/../lib/plugin.bash"

ARTIFACTS="$(plugin_read_config ARTIFACTS "")"
REGISTRY="$(plugin_read_config REGISTRY "")"
ARTIFACT_BUILD_ID="$(plugin_read_config ARTIFACT_BUILD_ID "")"
PROVENANCE_BUNDLE="$(plugin_read_config PROVENANCE_BUNDLE "")"

TMP_DIR=$(mktemp -d)
ARTIFACTS_DIR="${TMP_DIR}/artifacts"
PROVENANCE_DIR="${TMP_DIR}/provenance"

mkdir -p "${ARTIFACTS_DIR}" "${PROVENANCE_DIR}"

echo "~~~ ðŸšš Download artifacts"

if [ "${ARTIFACT_BUILD_ID}" != "" ]; then
  BUILD_OPTION="--build ${ARTIFACT_BUILD_ID}"
else
  BUILD_OPTION=""
fi

# Very important not to quote ${BUILD_OPTION} as it messes with the --option parsing
# shellcheck disable=SC2086
buildkite-agent artifact download ${ARTIFACTS} ${ARTIFACTS_DIR} ${BUILD_OPTION}

if [ "${PROVENANCE_BUNDLE}" != "" ]; then
  # shellcheck disable=SC2086
  buildkite-agent artifact download ${PROVENANCE_BUNDLE} ${PROVENANCE_DIR} ${BUILD_OPTION}
fi

echo "+++ ðŸšš Publishing to Packages"

if [ "${PROVENANCE_BUNDLE}" != "" ]; then
  PROVENANCE_BUNDLE_PATH="${PROVENANCE_DIR}/${PROVENANCE_BUNDLE}"
else
  PROVENANCE_BUNDLE_PATH=""
fi

python3 "${SCRIPT_DIR}/../main.py" \
  --artifacts-dir "${ARTIFACTS_DIR}" \
  --registry "${REGISTRY}" \
  --provenance-bundle "${PROVENANCE_BUNDLE_PATH}" 

echo "~~~ ðŸšš Clean up Publish to Packages"

rm -rf "${TMP_DIR}"
